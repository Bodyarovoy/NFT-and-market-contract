// есть список сминченых нфт в которых есть id
// создатель коллекции

// Запустить лотерею


// Struct lottery{
// id: LotteryId,
// lottery_token_id: AccountId,
// lottery_status: LotteryStatus,
// entries: Vec<AccountId>, //AccountId from nft-contract - series.rs - nft_mint
// winner: Option<AccountId>, 
// message_for_winner: String,
// }



// fn new

//    fn get_accounts_num(&self) -> u32 {
// self.entries.len() as _
// }



// fn is_finished(&self) -> bool {
//     self.lottery_status == LotteryStatus::Finished && self.is_pools_equal() && self.winner.is_some()
// }

// pub fn assert_is_finished(&self) {
// self.assert_equals_pool();
// assert!(self.winner.is_some());
// } 

// fn set_winner(&mut self) {
//     let total_entries = self.get_accounts_num();
//     let index = get_range_random_number(0, total_entries);
//     let winner = &self.entries[index];
   
//     self.winner = Some(winner.clone());
// }


// pub fn get_winner_unwrap(&self) -> AccountId {
//     match &self.winner {
//         Some(winner) => winner.clone(),
//         None => panic!("Lottery has no winner"),
// }
// }








// near call $CONTRACT new '{
//     "config": {
//         "owner_id": "'$OWNER'",
//         "contract_fee_ratio": 1000,
//         "treasury_ratio": 0,
//         "investor_ratio": 4000,
//         "treasury": "'$TREASURY'",
//         "investor": "'$INVESTOR'",
//         "accepted_subs": "'$ACCEPTED_SUBS'"
//     },
//     "entry_fees": [
//         "near" [
//             "'$ONE_NEAR'", 
//             "'$THREE_NEAR'", 
//             "'$FIVE_NEAR'"
//         ],
//     ],
//     "num_participants": [
//         5,6,7,8,9,10
//     ]
// }' --accountId $CONTRACT







